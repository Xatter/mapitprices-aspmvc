//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace MapItPrices.Models
{
    public partial class User
    {
        #region Primitive Properties
    
        public virtual string Username
        {
            get;
            set;
        }
    
        public virtual string RealName
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual System.DateTime Created
        {
            get;
            set;
        }
    
        public virtual System.DateTime LastUpdated
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<OpenID> OpenIDs
        {
            get
            {
                if (_openIDs == null)
                {
                    var newCollection = new FixupCollection<OpenID>();
                    newCollection.CollectionChanged += FixupOpenIDs;
                    _openIDs = newCollection;
                }
                return _openIDs;
            }
            set
            {
                if (!ReferenceEquals(_openIDs, value))
                {
                    var previousValue = _openIDs as FixupCollection<OpenID>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOpenIDs;
                    }
                    _openIDs = value;
                    var newValue = value as FixupCollection<OpenID>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOpenIDs;
                    }
                }
            }
        }
        private ICollection<OpenID> _openIDs;
    
        public virtual ICollection<StoreItem> StoreItems
        {
            get
            {
                if (_storeItems == null)
                {
                    var newCollection = new FixupCollection<StoreItem>();
                    newCollection.CollectionChanged += FixupStoreItems;
                    _storeItems = newCollection;
                }
                return _storeItems;
            }
            set
            {
                if (!ReferenceEquals(_storeItems, value))
                {
                    var previousValue = _storeItems as FixupCollection<StoreItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreItems;
                    }
                    _storeItems = value;
                    var newValue = value as FixupCollection<StoreItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreItems;
                    }
                }
            }
        }
        private ICollection<StoreItem> _storeItems;
    
        public virtual ICollection<Item> Items
        {
            get
            {
                if (_items == null)
                {
                    var newCollection = new FixupCollection<Item>();
                    newCollection.CollectionChanged += FixupItems;
                    _items = newCollection;
                }
                return _items;
            }
            set
            {
                if (!ReferenceEquals(_items, value))
                {
                    var previousValue = _items as FixupCollection<Item>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupItems;
                    }
                    _items = value;
                    var newValue = value as FixupCollection<Item>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupItems;
                    }
                }
            }
        }
        private ICollection<Item> _items;
    
        public virtual ICollection<Store> Stores
        {
            get
            {
                if (_stores == null)
                {
                    var newCollection = new FixupCollection<Store>();
                    newCollection.CollectionChanged += FixupStores;
                    _stores = newCollection;
                }
                return _stores;
            }
            set
            {
                if (!ReferenceEquals(_stores, value))
                {
                    var previousValue = _stores as FixupCollection<Store>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStores;
                    }
                    _stores = value;
                    var newValue = value as FixupCollection<Store>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStores;
                    }
                }
            }
        }
        private ICollection<Store> _stores;
    
        public virtual ICollection<Badge> Badges
        {
            get
            {
                if (_badges == null)
                {
                    var newCollection = new FixupCollection<Badge>();
                    newCollection.CollectionChanged += FixupBadges;
                    _badges = newCollection;
                }
                return _badges;
            }
            set
            {
                if (!ReferenceEquals(_badges, value))
                {
                    var previousValue = _badges as FixupCollection<Badge>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBadges;
                    }
                    _badges = value;
                    var newValue = value as FixupCollection<Badge>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBadges;
                    }
                }
            }
        }
        private ICollection<Badge> _badges;
    
        public virtual ICollection<Role> Roles
        {
            get
            {
                if (_roles == null)
                {
                    var newCollection = new FixupCollection<Role>();
                    newCollection.CollectionChanged += FixupRoles;
                    _roles = newCollection;
                }
                return _roles;
            }
            set
            {
                if (!ReferenceEquals(_roles, value))
                {
                    var previousValue = _roles as FixupCollection<Role>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRoles;
                    }
                    _roles = value;
                    var newValue = value as FixupCollection<Role>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRoles;
                    }
                }
            }
        }
        private ICollection<Role> _roles;
    
        public virtual ICollection<ShoppingList> ShoppingLists
        {
            get
            {
                if (_shoppingLists == null)
                {
                    var newCollection = new FixupCollection<ShoppingList>();
                    newCollection.CollectionChanged += FixupShoppingLists;
                    _shoppingLists = newCollection;
                }
                return _shoppingLists;
            }
            set
            {
                if (!ReferenceEquals(_shoppingLists, value))
                {
                    var previousValue = _shoppingLists as FixupCollection<ShoppingList>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupShoppingLists;
                    }
                    _shoppingLists = value;
                    var newValue = value as FixupCollection<ShoppingList>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupShoppingLists;
                    }
                }
            }
        }
        private ICollection<ShoppingList> _shoppingLists;

        #endregion
        #region Association Fixup
    
        private void FixupOpenIDs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OpenID item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OpenID item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupStoreItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreItem item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Item item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Item item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupStores(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Store item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Store item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupBadges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Badge item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Badge item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Role item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Role item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupShoppingLists(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ShoppingList item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ShoppingList item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion
    }
}
