//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace MapItPrices.Models
{
    public partial class Item
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string UPC
        {
            get { return _uPC; }
            set { _uPC = value; }
        }
        private string _uPC = "null";
    
        public virtual string Size
        {
            get;
            set;
        }
    
        public virtual int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (User != null && User.ID != value)
                    {
                        User = null;
                    }
                    _userID = value;
                }
            }
        }
        private int _userID;
    
        public virtual string Brand
        {
            get;
            set;
        }
    
        public virtual System.DateTime Created
        {
            get;
            set;
        }
    
        public virtual System.DateTime LastUpdated
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        internal virtual ICollection<StoreItem> StoreItems
        {
            get
            {
                if (_storeItems == null)
                {
                    var newCollection = new FixupCollection<StoreItem>();
                    newCollection.CollectionChanged += FixupStoreItems;
                    _storeItems = newCollection;
                }
                return _storeItems;
            }
            set
            {
                if (!ReferenceEquals(_storeItems, value))
                {
                    var previousValue = _storeItems as FixupCollection<StoreItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStoreItems;
                    }
                    _storeItems = value;
                    var newValue = value as FixupCollection<StoreItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStoreItems;
                    }
                }
            }
        }
        private ICollection<StoreItem> _storeItems;
    
        public virtual User User
        {
            internal get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        internal virtual ICollection<ShoppingList> ShoppingLists
        {
            get
            {
                if (_shoppingLists == null)
                {
                    var newCollection = new FixupCollection<ShoppingList>();
                    newCollection.CollectionChanged += FixupShoppingLists;
                    _shoppingLists = newCollection;
                }
                return _shoppingLists;
            }
            set
            {
                if (!ReferenceEquals(_shoppingLists, value))
                {
                    var previousValue = _shoppingLists as FixupCollection<ShoppingList>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupShoppingLists;
                    }
                    _shoppingLists = value;
                    var newValue = value as FixupCollection<ShoppingList>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupShoppingLists;
                    }
                }
            }
        }
        private ICollection<ShoppingList> _shoppingLists;

        #endregion
        #region Association Fixup
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Items.Contains(this))
            {
                previousValue.Items.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Items.Contains(this))
                {
                    User.Items.Add(this);
                }
                if (UserID != User.ID)
                {
                    UserID = User.ID;
                }
            }
        }
    
        private void FixupStoreItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StoreItem item in e.NewItems)
                {
                    item.Item = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StoreItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Item, this))
                    {
                        item.Item = null;
                    }
                }
            }
        }
    
        private void FixupShoppingLists(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ShoppingList item in e.NewItems)
                {
                    if (!item.Items.Contains(this))
                    {
                        item.Items.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ShoppingList item in e.OldItems)
                {
                    if (item.Items.Contains(this))
                    {
                        item.Items.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
