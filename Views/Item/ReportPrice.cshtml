@model MapItPrices.ViewModels.ReportPriceViewModel
@{
    ViewBag.Title = "ReportPrice";
}
<script type="text/javascript">
    function createStoreComplete(data) {
        var json_data = data;

        if (json_data.Success === true) {
            var storeIDField = $("#StoreItem_Store_ID");
            var newAddressEditor = $("#NewStore");
            var storeNameField = $("#StoreName");

            $("#btn_newStore").toggle();
            $("#btn_cancelNewStore").toggle();
            storeNameField.toggle('slow');
            newAddressEditor.toggle('fast');

            storeIDField.val(json_data.ID);
            storeNameField.val(json_data.Store.Name);
        }
    }

    function createItemComplete(data) {
        if (data.Success === true) {
            var itemIDField = $("#StoreItem_Item_ID");
            var itemNameField = $("#ItemName");
            var newItemEditor = $("#NewItem");

            $("#btn_newItem").show();
            $("#btn_cancelNewItem").hide();

            itemNameField.show('slow');
            newItemEditor.hide('fast');

            itemIDField.val(data.ID);
            itemNameField.val(data.Item.Name);
        }
    }

    $(function () {
        var storeNameField = $("#StoreName");
        var storeIDField = $("#StoreItem_Store_ID");
        var newAddressEditor = $("#NewStore");

        var itemNameField = $("#ItemName");
        var itemIDField = $("#StoreItem_Item_ID");
        var newItemEditor = $("#NewItem");

        newAddressEditor.hide();
        newItemEditor.hide();

        function newStoreButtonClick() {
            $("#btn_newStore").hide();
            $("#btn_cancelNewStore").show();

            storeNameField.hide('fast', null);
            newAddressEditor.show('slow', null);
        }

        function cancelButtonClicked() {
            $("#btn_cancelNewStore").hide();
            $("#btn_newStore").show();

            newAddressEditor.hide('fast', null);
            storeNameField.show('slow', null);
        }

        $("#btn_newStore").button({
            icons: {
                primary: "ui-icon-circle-plus"
            }
        }).click(newStoreButtonClick);


        $("#btn_cancelNewStore").button({
            icons: {
                primary: "ui-icon-circle-minus"
            }
        }).click(cancelButtonClicked);

        $("#btn_newItem").button({
            icons: {
                primary: "ui-icon-circle-plus"
            }
        }).click(function () {
            $("#btn_newItem").hide();
            $("#btn_cancelNewItem").show();

            itemNameField.hide('fast');
            newItemEditor.show('slow');
        });


        $("#btn_cancelNewItem").button({
            icons: {
                primary: "ui-icon-circle-minus"
            }
        }).click(function () {
            $("#btn_cancelNewItem").hide();
            $("#btn_newItem").show();

            itemNameField.show('slow');
            newItemEditor.hide('fast');
        });

        storeNameField.autocomplete({
            source: "/API/SearchStores",
            focus: function (event, ui) {
                storeNameField.val(ui.item.Name);
                return false;
            },
            minLength: 1,
            select: function (event, ui) {
                storeNameField.val(ui.item.Name);
                storeIDField.val(ui.item.ID);
                newAddressEditor.hide();
                return false;
            }
        })
         .data("autocomplete")._renderItem = function (ul, item) {
             return $("<li></li>")
                 .data("item.autocomplete", item)
                 .append("<a>" + item.Name + "<br>" + item.Address + ", " + item.City + ", " + item.State + "</a>")
                 .appendTo(ul);
         };

        itemNameField.autocomplete({
            source: "/API/SearchItems",
            focus: function (event, ui) {
                $("#Item_Name").val(ui.item.Name);
                return false;
            },
            minLength: 1,
            select: function (event, ui) {
                itemNameField.val(ui.item.Name + ", " + ui.item.Size);
                $("#StoreItem_Item_ID").val(ui.item.ID);
                return false;
            }
        }).data("autocomplete")._renderItem = function (ul, item) {
            return $("<li></li>")
                .data("item.autocomplete", item)
                .append("<a>" + item.Name + ", " + item.Size + " by " + item.Brand + "</a>")
                .appendTo(ul);
        };

    });

</script>
<h2>
    ReportPrice</h2>
@using (Html.BeginForm())
{ 
    @Html.ValidationSummary(true)
    <fieldset>
        <div class="editor-label ui-widget">
            @Html.LabelFor(model => model.ItemName, "Item")
            @Html.EditorFor(model => model.ItemName)<a id="btn_newItem">New Item</a><a id="btn_cancelNewItem"
                style="display: none">Cancel</a>
            @Html.HiddenFor(m => m.StoreItem.Item.ID)
            @Html.EditorFor(model => model.StoreItem.Item)
        </div>
        <div class="editor-label ui-widget">
            @Html.LabelFor(m => m.StoreName, "Store")
            @Html.EditorFor(m => m.StoreName)<a id="btn_newStore">New Store</a><a id="btn_cancelNewStore"
                style="display: none">Cancel</a>
            @Html.HiddenFor(m => m.StoreItem.Store.ID)
            @Html.EditorFor(model => model.StoreItem.Store)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.StoreItem.Price)
            @Html.EditorFor(model => model.StoreItem.Price)
            @Html.ValidationMessageFor(model => model.StoreItem.Price)
        </div>
    </fieldset>
    <input type="submit" />
}
<div>
    <div id="log">
    </div>
</div>
