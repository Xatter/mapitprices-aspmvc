@model MapItPrices.ViewModels.ReportPriceViewModel
@{
    ViewBag.Title = "ReportPrice";
}
<script type="text/javascript">
    function createStoreComplete(xhr, statusText) {
        var json_data = $.parseJSON(xhr.responseText);
        alert(xhr.responseText);

        var storeIDField = $("#StoreItem_Store_ID");
        var newAddressEditor = $("#NewStore");
        var storeNameField = $("#StoreName");

        $("#btn_newStore").toggle();
        $("#btn_Cancel").toggle();
        storeNameField.toggle('slow');
        newAddressEditor.toggle('fast');

        storeIDField.val(json_data.ID);
        storeNameField.val(json_data.Store.Name);
    }

    $(function () {
        var newAddressEditor = $("#NewStore");
        var storeNameField = $("#StoreName");
        var storeIDField = $("#StoreItem_Store_ID");

        function newStoreButtonClick() {
            $("#btn_newStore").hide();
            $("#btn_Cancel").show();

            storeNameField.hide('fast', null);
            newAddressEditor.show('slow', null);
        }

        function cancelButtonClicked() {
            $("#btn_Cancel").hide();
            $("#btn_newStore").show();

            newAddressEditor.hide('fast', null);
            storeNameField.show('slow', null);
        }

        storeNameField.autocomplete({
            source: "/API/SearchStores",
            focus: function (event, ui) {
                nameField.val(ui.item.Name);
                return false;
            },
            minLength: 1,
            select: function (event, ui) {
                storeNameField.val(ui.item.Name);
                storeIDField.val(ui.item.ID);
                newAddressEditor.hide();
                return false;
            }
        })
         .data("autocomplete")._renderItem = function (ul, item) {
             return $("<li></li>")
                 .data("item.autocomplete", item)
                 .append("<a>" + item.Name + ", " + item.Address + " " + item.City + " " + item.State + "</a>")
                 .appendTo(ul);
         };

        $("#StoreItem_Item_Name").autocomplete({
            source: "/API/SearchItems",
            focus: function (event, ui) {
                $("#Item_Name").val(ui.item.Name);
                return false;
            },
            minLength: 1,
            select: function (event, ui) {
                $("#StoreItem_Item_Name").val(ui.item.Name + ", " + ui.item.Size);
                $("#StoreItem_Item_ID").val(ui.item.ID);
                return false;
            }
        }).data("autocomplete")._renderItem = function (ul, item) {
            return $("<li></li>")
                .data("item.autocomplete", item)
                .append("<a>" + item.Name + ", " + item.Size + " by " + item.Brand + "</a>")
                .appendTo(ul);
        };

        newAddressEditor.hide();

        $("#btn_newStore").button({
            icons: {
                primary: "ui-icon-circle-plus"
            }
        }).click(newStoreButtonClick);


        $("#btn_Cancel").button({
            icons: {
                primary: "ui-icon-circle-minus"
            }
        }).click(cancelButtonClicked);
    });

</script>
<h2>
    ReportPrice</h2>
@using (Html.BeginForm())
{ 
    @Html.ValidationSummary(true)
    <fieldset>
        <div class="editor-label">
            @Html.LabelFor(model => model.StoreItem.Item.Name, "Item")
            @Html.EditorFor(model => model.StoreItem.Item.Name)
            @Html.HiddenFor(m => m.StoreItem.Item.ID)
        </div>
        <div class="editor-label ui-widget">
            @Html.LabelFor(m => m.StoreName, "Store")
            @Html.EditorFor(m => m.StoreName)<a id="btn_newStore">New Store</a><a id="btn_Cancel" style="display: none">Cancel</a>
            @Html.HiddenFor(m => m.StoreItem.Store.ID)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.StoreItem.Price)
            @Html.EditorFor(model => model.StoreItem.Price)
            @Html.ValidationMessageFor(model => model.StoreItem.Price)
        </div>
    </fieldset>
    <input type="submit" />
}
<div id="NewStore">
    @Html.HiddenFor(m => m.is_new_store)
    @Html.EditorFor(model => model.StoreItem.Store)
</div>
<div>
    <div id="log">
    </div>
</div>
