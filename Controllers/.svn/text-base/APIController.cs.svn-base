using System;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using MapItPrices.Models;
using System.Net;
using System.Runtime.Serialization.Json;

namespace MapItPrices.Controllers
{
    public class APIController : BaseController
    {
        User _androidUser;

        public APIController() : base()
        {
//            _androidUser = MapItDB.Users.Single(u => u.Username == "android");
        }

        public APIController(IMapItEntities entityStore) : base(entityStore)
        {
        }

        //
        // GET: /API/SearchItems?searchtext={searchtext}
        // 
        [HttpGet]
        public ActionResult SearchItems(string searchtext)
        {
            try
            {
                // check if it's a UPC
               if( IsStringCompletelyNumeric(searchtext))
               {
                    var items = from i in MapItDB.Items
                                where i.UPC.Trim() == searchtext.Trim()
                                select new
                                {
                                    ID = i.ID,
                                    Name = i.Name,
                                    UPC = i.UPC,
                                    Size = i.Size
                                };

                    return new ObjectResult(new APICallResult(1, "Success.",items));
                }
                else
                {
                    var items = from i in MapItDB.Items
                                where i.Name.Contains(searchtext)
                                select new
                                {
                                    ID = i.ID,
                                    Name = i.Name,
                                    UPC = i.UPC,
                                    Size = i.Size
                                };

                    return new ObjectResult(new APICallResult(1, "Success.",items));
                }

            }
            catch 
            {
                return new ObjectResult(new APICallResult(0, "Failed."));
            }
        }

        private static bool IsStringCompletelyNumeric(string searchtext)
        {
            for (int i = 0; i < searchtext.Length; i++)
            {
                if ((int)searchtext[i] > 57 ||
                    (int)searchtext[i] < 48)
                    return false;
            }

            return true;
        }

        [HttpGet]
        public ActionResult SearchForMapResult(string searchtext)
        {
            try
            {
                var search = searchtext.ToUpperInvariant();

                var results = from storeitem in MapItDB.StoreItems
                              where storeitem.Item.Name.ToUpperInvariant().Contains(search)
                              //group storeitem by storeitem.StoreId into j
                              select new
                              {
                                  StoreName = storeitem.Store.Name,
                                  StoreID = storeitem.StoreId,
                                  ItemName = storeitem.Item.Name,
                                  ItemID = storeitem.ItemId,
                                  Price = storeitem.Price,
                                  Latitude = storeitem.Store.Latitude,
                                  Longitude = storeitem.Store.Longitude
                              };

                return new ObjectResult(new APICallResult(1, "Success", results));

            }
            catch
            {
                return new ObjectResult(new APICallResult(0, "Failed"));
            }
        }

        //
        // GET: /API/GetItem/{id}
        // 
        public ActionResult GetItem(int id)
        {
            try
            {
                var result = from i in MapItDB.Items
                             where i.ID == id
                             select new
                             {
                                 ID = i.ID,
                                 Name = i.Name,
                                 UPC = i.UPC,
                                 Size = i.Size
                             };

                return new ObjectResult(new APICallResult(1, "Success.", result));
            }
            catch 
            {
                return new ObjectResult(new APICallResult(0, "Failed."));
            }
        }

        //
        // POST: /API/CreateItem/{id}
        // 
        [HttpPost]
        public ActionResult CreateItem(FormCollection collection)
        {
            try
            {
                Item i = new Item();
                i.Name = collection["Name"];
                i.UPC = collection["UPC"];
                i.Size = collection["Size"];

                // when unit test ready, swap this code
                MapItDB.Items.AddObject(i);
                MapItDB.SaveChanges();

                return new ObjectResult(new APICallResult(1, "Success",i));
            }
            catch
            {
                return new ObjectResult(new APICallResult(0, "Failure"));
            }
        }

        public ActionResult GetItemPrices(int id)
        {

            var itemPrices = from i in MapItDB.StoreItems
                             where i.ItemId == id
                             select new
                             {
                                 StoreID = i.StoreId,
                                 StoreName = i.Store.Name,
                                 ItemName = i.Item.Name,
                                 Price = i.Price,
                                 LastUpdated = i.LastUpdated,
                                 Latitude = i.Store.Latitude,
                                 Longitude = i.Store.Longitude
                             };

            return new ObjectResult(new APICallResult(1, "Success", itemPrices));
        }

        // 
        // POST: /API/EditItem/{id}
        //
        [HttpPost]
        public ActionResult EditItem(int id, FormCollection collection)
        {
            try
            {
                var item = MapItDB.Items.Single(i => i.ID == id);
                item.Name = collection["Name"];
                item.UPC = collection["UPC"];
                item.Size = collection["Size"];

                MapItDB.SaveChanges();

                return new ObjectResult(new APICallResult(1, "Success"));
            }
            catch
            {
                return new ObjectResult(new APICallResult(0, "Failure"));
            }
        }

        //
        // POST: /API/DeleteItem/{Id}
        //
        [HttpPost]
        public ActionResult DeleteItem(int id, FormCollection collection)
        {
            try
            {
                var item = MapItDB.Items.Single(i => i.ID == id);
                MapItDB.Items.DeleteObject(item);
                MapItDB.SaveChanges();

                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }

        public ActionResult UpdatePrice(int itemid, int storeid, double price)
        {
            try
            {
                var itemprice = MapItDB.StoreItems.SingleOrDefault(i => i.ItemId == itemid && i.StoreId == storeid);

                if (itemprice == null)
                {
                    StoreItem storeitem = new StoreItem();
                    storeitem.ItemId = itemid;
                    storeitem.StoreId = storeid;
                    storeitem.Price = (decimal)price;
                    storeitem.LastUpdated = DateTime.Now;

                    MapItDB.StoreItems.AddObject(storeitem);
                }
                else
                { 
                    itemprice.Price = (decimal)price;
                    itemprice.LastUpdated = DateTime.Now;
                }

                MapItDB.SaveChanges();

                return new ObjectResult(new APICallResult(1, "Success"));
            }
            catch 
            {
                return new ObjectResult(new APICallResult(0, "Failure"));
            }
        }

        public ActionResult GetStore(int id)
        {
            try
            {
                var result = from s in MapItDB.Stores
                             where s.ID == id
                             select new
                             {
                                 Name = s.Name,
                                 Address = s.Address + ", " + s.City + ", " + s.State,
                                 Latitude = s.Latitude,
                                 Longitude = s.Longitude
                             };

                return new ObjectResult(new APICallResult(1, "Success.", result));
            }
            catch
            {
                
                return new ObjectResult(new APICallResult(0, "Failed."));
            }
        }

        [HttpPost]
        public ActionResult CreateStore(FormCollection collection)
        {
            try
            {
                Store store = new Store();

                store.Name = collection["Name"];
                store.Address = collection["Address"];
                store.City = collection["City"];
                store.State = collection["State"];
                store.Zip = collection["Zip"];

                GeoCodeStore(store);
                MapItDB.Stores.AddObject(store);
                MapItDB.SaveChanges();

                return new ObjectResult(new APICallResult(1, "Success."));
            }
            catch
            {
                return new ObjectResult(new APICallResult(0, "Failed."));
            }
        }
        
        public ActionResult GetStores(double lat, double lng)
        {
            try
            {
                var result = from s in MapItDB.Stores
                             select new
                             {
                                 ID = s.ID,
                                 Name = s.Name,
                                 Address = s.Address,
                                 Latitude = s.Latitude,
                                 Longitude = s.Longitude
                             };

                return new ObjectResult(new APICallResult(1, "Success.", result));
            }
            catch
            {
                return new ObjectResult(new APICallResult(0, "Failed."));
            }
        }


        [NonAction]
        public void GeoCodeStore(int StoreID)
        {
            GeoCodeStore(MapItDB.Stores.Single(s => s.ID == StoreID));
        }

        [NonAction]
        public static void GeoCodeStore(Store store)
        {
            string fullAddress = store.Address + ", " + store.City + ", " + store.State;

            string url = string.Format(
                "http://maps.google.com/maps/api/geocode/json?address={0}&region=dk&sensor=false",
                HttpUtility.HtmlEncode(fullAddress));

            var request = (HttpWebRequest)HttpWebRequest.Create(url);
            request.Headers.Add(HttpRequestHeader.AcceptEncoding, "gzip,deflate");
            request.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(GeoResponse));
            var res = (GeoResponse)serializer.ReadObject(request.GetResponse().GetResponseStream());
            store.Latitude = res.Results[0].Geometry.Location.Lat;
            store.Longitude = res.Results[0].Geometry.Location.Lng;
        }

        internal void EditStore(int id, FormCollection collection)
        {
            var store = MapItDB.Stores.SingleOrDefault(s => s.ID == id);
            if (store != null)
            {
                store.Name = collection["Name"];
                store.Address = collection["Address"];
                store.City = collection["City"];
                store.State = collection["State"];
                store.Zip = collection["Zip"];

                MapItDB.SaveChanges();
            }
        }

        internal void DeleteStore(int id, FormCollection collection)
        {
            var store = MapItDB.Stores.Single(s => s.ID == id);
            MapItDB.Stores.DeleteObject(store);
            MapItDB.SaveChanges();
        }
    }
}